package ai.mach_predictor;

import ai.database.DBHandler;
import java.awt.Color;
import java.awt.Component;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JList;
import javax.swing.ListCellRenderer;

/**
 *
 * @author arsalan
 */
public class MainScreen extends javax.swing.JFrame {

    /**
     * Creates new form MainScreen
     */
    private List<String> selectedTeam2Players;
    private List<String> selectedTeam1Players;
    private ResultSet result;
    private float p1BatAve = 0, p1BatSr = 0, p1BatT = 0, p1BowlAve = 0, p1BowlEcon = 0, p1BowlSr = 0, p1BowlT = 0;
    private float p2BatAve = 0, p2BatSr = 0, p2BatT = 0, p2BowlAve = 0, p2BowlEcon = 0, p2BowlSr = 0, p2BowlT = 0;
    private float p1BatRuns = 0, p1BatInns = 0, p1Score = 0, p1BowlRuns = 0, p1BowlInns = 0, p1ScoreG = 0, p1Exp = 0;
    private float p2BatRuns = 0, p2BatInns = 0, p2Score = 0, p2BowlRuns = 0, p2BowlInns = 0, p2ScoreG = 0, p2Exp = 0;
    private final Predictor predictor;
    private final Loading loadingScreen;

    public MainScreen() throws IOException, FileNotFoundException, ClassNotFoundException {

        initComponents();
        this.setBounds(230, 120, 830, 550);
        selectedTeam1Players = new ArrayList<>();
        selectedTeam2Players = new ArrayList<>();
        predictor = new Predictor();
        loadingScreen = new Loading();
        player1List.setCellRenderer(new CheckListRenderer());
        player2List.setCellRenderer(new CheckListRenderer());
        lblError.setForeground(Color.red);
        player1List.setVisible(false);
        player2List.setVisible(false);
        loadingScreen.setVisible(false);
        createComboBox();
    }

    private void createComboBox() throws IOException, FileNotFoundException, ClassNotFoundException {
        try {
            String str = "";
            result = DBHandler.getQueryResult("Select `name` from `country`");
            team1Combo.removeAllItems();
            team1Combo.addItem("Select Country");
            team2Combo.removeAllItems();
            team2Combo.addItem("Select Country");
            while (result.next()) {
                team1Combo.addItem(result.getString(1));
                team2Combo.addItem(result.getString(1));
            }

        } catch (SQLException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void select11(JList list, List<String> selectedPlayers) {
        try {
            for (int index = 0; index < 11; index++) {
                CheckListItem item = (CheckListItem) list.getModel().getElementAt(index);
                item.setSelected(true);
                list.repaint(list.getCellBounds(index, index));

                if (!selectedPlayers.contains((String) list.getModel().getElementAt(index).toString())) {
                    selectedPlayers.add((String) list.getModel().getElementAt(index).toString());
                }
            }
        } catch (Exception e) {
            list.setVisible(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        player1List = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        player2List = new javax.swing.JList();
        team1Combo = new javax.swing.JComboBox();
        team2Combo = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        statsScreen = new javax.swing.JTextArea();
        lblError = new javax.swing.JLabel();
        btnPredict = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Match Predictor");
        setResizable(false);
        getContentPane().setLayout(null);

        player1List.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                player1ListMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                player1ListMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(player1List);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(30, 270, 170, 240);

        player2List.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                player2ListMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                player2ListMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(player2List);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(640, 270, 170, 240);

        team1Combo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Country", "Item 1", "Item 2", "Item 3", "Item 4" }));
        team1Combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                team1ComboActionPerformed(evt);
            }
        });
        getContentPane().add(team1Combo);
        team1Combo.setBounds(30, 190, 170, 40);

        team2Combo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Country", "Item 1", "Item 2", "Item 3", "Item 4" }));
        team2Combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                team2ComboActionPerformed(evt);
            }
        });
        getContentPane().add(team2Combo);
        team2Combo.setBounds(640, 190, 170, 40);

        statsScreen.setEditable(false);
        statsScreen.setBackground(new java.awt.Color(0, 0, 0));
        statsScreen.setColumns(20);
        statsScreen.setForeground(new java.awt.Color(255, 255, 255));
        statsScreen.setRows(5);
        jScrollPane3.setViewportView(statsScreen);

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(220, 280, 390, 190);
        getContentPane().add(lblError);
        lblError.setBounds(170, 230, 480, 40);

        btnPredict.setText("Predict");
        btnPredict.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPredict.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPredictActionPerformed(evt);
            }
        });
        getContentPane().add(btnPredict);
        btnPredict.setBounds(350, 480, 120, 30);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/T20doodle.jpg"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(110, 0, 620, 190);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void player1ListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_player1ListMouseClicked
        // TODO add your handling code here:

        int index = player1List.locationToIndex(evt.getPoint());
        CheckListItem item = (CheckListItem) player1List.getModel().getElementAt(index);
        item.setSelected(!item.isSelected());
        player1List.repaint(player1List.getCellBounds(index, index));
        String val = (String) player1List.getSelectedValue().toString();
        if (!selectedTeam1Players.contains(val)) {
            selectedTeam1Players.add(val);
        } else {
            selectedTeam1Players.remove(val);
        }

        predictionButtonStatus();

    }//GEN-LAST:event_player1ListMouseClicked

    private void player1ListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_player1ListMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_player1ListMousePressed

    private void player2ListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_player2ListMouseClicked
        // TODO add your handling code here:
        int index = player2List.locationToIndex(evt.getPoint());
        CheckListItem item = (CheckListItem) player2List.getModel().getElementAt(index);
        item.setSelected(!item.isSelected());
        player2List.repaint(player2List.getCellBounds(index, index));
        String val = (String) player2List.getSelectedValue().toString();
        if (!selectedTeam2Players.contains(val)) {
            selectedTeam2Players.add(val);
        } else {
            selectedTeam2Players.remove(val);
        }

        predictionButtonStatus();

    }

    private void predictionButtonStatus() {
        if (selectedTeam1Players.size() == 11) {
            if (selectedTeam2Players.size() == 11) {
                if (team1Combo.getSelectedIndex() != team2Combo.getSelectedIndex()) {
                    btnPredict.setEnabled(true);
                    lblError.setText("");
                } else {
                    lblError.setText("Both Teams must be different!");
                    btnPredict.setEnabled(false);
                }
            } else {
                lblError.setText("Team 2 must have 11 Players");
                btnPredict.setEnabled(false);
            }
        } else {
            lblError.setText("Team 1 must have 11 Players");
            btnPredict.setEnabled(false);
        }

    }//GEN-LAST:event_player2ListMouseClicked

    private void player2ListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_player2ListMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_player2ListMousePressed

    private void team1ComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_team1ComboActionPerformed
        // TODO add your handling code here:
        if (team1Combo.getSelectedIndex() != team2Combo.getSelectedIndex()) {
            lblError.setText("");
            if (team1Combo.getSelectedIndex() > 0) {
                player1List.setVisible(true);
                selectedTeam1Players.clear();
                createCheckBoxList(player1List, 1);
                select11(player1List, selectedTeam1Players);
                if (selectedTeam2Players.size() == 11) {
                    btnPredict.setEnabled(true);
                }
            } else {
                player1List.setVisible(false);
                Object a[] = new Object[0];
                player1List.setListData(a);
                btnPredict.setEnabled(false);
            }
        } else {
            player1List.setVisible(false);
            btnPredict.setEnabled(false);
            lblError.setText("Both Teams must be different!");
        }
    }//GEN-LAST:event_team1ComboActionPerformed

    private void team2ComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_team2ComboActionPerformed
        // TODO add your handling code here:
        if (team1Combo.getSelectedIndex() != team2Combo.getSelectedIndex()) {
            lblError.setText("");
            if (team2Combo.getSelectedIndex() > 0) {
                player2List.setVisible(true);
                selectedTeam2Players.clear();
                createCheckBoxList(player2List, 2);
                select11(player2List, selectedTeam2Players);
                if (selectedTeam1Players.size() == 11) {
                    btnPredict.setEnabled(true);
                }
            } else {
                player2List.setVisible(false);
                Object a[] = new Object[0];
                player2List.setListData(a);
                btnPredict.setEnabled(false);
            }
        } else {
            player2List.setVisible(false);
            btnPredict.setEnabled(false);
            lblError.setText("Both Teams must be different!");
        }
    }//GEN-LAST:event_team2ComboActionPerformed

    private void btnPredictActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPredictActionPerformed
        try {
            clearVariables();
            statsScreen.setText("\t                   Match Result\n\n");
            System.out.println(selectedTeam1Players);
            System.out.println(selectedTeam2Players);
            computePlayer1();
            System.out.println("Player1: " + p1BatAve / p1BatT + " " + p1BatSr / p1BatT + " " + p1BowlAve / p1BowlT + " " + p1BowlEcon / p1BowlT + " " + p1BowlSr / p1BowlT + " " + p1Exp / 11 + " Expected Score: " + p1Score + " Expected Score Conceded: " + p1ScoreG);
            computePlayer2();
            System.out.println("Player2: " + p2BatAve / p2BatT + " " + p2BatSr / p2BatT + " " + p2BowlAve / p2BowlT + " " + p2BowlEcon / p2BowlT + " " + p2BowlSr / p2BowlT + " " + p2Exp / 11 + " Expected Score: " + p2Score + " Expected Score Conceded: " + p2ScoreG);

            this.setVisible(false);
            loadingScreen.setVisible(true);
            int matchResult = predictor.predictMatch(p1BatAve > p2BatAve, p1BatSr > p2BatSr, p1BowlAve < p2BowlAve, p1BowlEcon < p2BowlEcon, p1BowlSr < p2BowlSr, p1Exp > p2Exp);
            System.out.println("Player " + matchResult + " will win");
            statsScreen.append(team1Combo.getSelectedItem() + " VS " + team2Combo.getSelectedItem() + "\n\n");
            statsScreen.append("Predicted Results: \n");
            int score = 0;
            if (matchResult == 1) {
                statsScreen.append(team1Combo.getSelectedItem() + " will win the match.\n");
            } else {
                statsScreen.append(team2Combo.getSelectedItem() + " will win the match.\n");
            }
            score = (int) ((p1Score + p2Score) / 2);
            statsScreen.append("Winning Team has to make score of: " + score + " runs.\n");
            showMainScreen();
        } catch (Exception ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnPredictActionPerformed

    private void computePlayer2() throws SQLException, NumberFormatException, IOException, FileNotFoundException, ClassNotFoundException {
        for (int i = 0; i < selectedTeam2Players.size(); i++) {
            result = DBHandler.getQueryResult("select ave, sr, runs, inns from bat_stat where ave != '-' and sr != '-' and idPlayer = (select `idPlayer` from `player` where Name = '" + selectedTeam2Players.get(i) + "')");
            while (result.next()) {
                p2BatAve += Float.parseFloat(result.getString(1));
                p2BatSr += Float.parseFloat(result.getString(2));
                p2BatRuns = Float.parseFloat(result.getString(3));
                p2BatInns = Float.parseFloat(result.getString(4));
                p2Score += p2BatRuns / p2BatInns;
                p2BatT++;
            }

            result = DBHandler.getQueryResult("select `Matches` from `player` where Name = '" + selectedTeam2Players.get(i) + "'");
            while (result.next()) {
                p2Exp += Float.parseFloat(result.getString(1));
            }

            result = DBHandler.getQueryResult("select ave, econ, sr, runs, inns from bowl_stat where ave != '-' and econ != '-' and idPlayer = (select `idPlayer` from `player` where Name = '" + selectedTeam2Players.get(i) + "')");
            while (result.next()) {
                p2BowlAve += Float.parseFloat(result.getString(1));
                p2BowlEcon += Float.parseFloat(result.getString(2));
                p2BowlSr += Float.parseFloat(result.getString(3));
                p2BowlRuns = Float.parseFloat(result.getString(4));
                p2BowlInns = Float.parseFloat(result.getString(5));
                p2ScoreG += p2BowlRuns / p2BowlInns;
                p2BowlT++;
            }

        }
    }

    private void computePlayer1() throws NumberFormatException, SQLException, IOException, FileNotFoundException, ClassNotFoundException {
        for (int i = 0; i < selectedTeam1Players.size(); i++) {
            result = DBHandler.getQueryResult("select ave, sr, runs, inns from bat_stat where ave != '-' and sr != '-' and idPlayer = (select `idPlayer` from `player` where Name = '" + selectedTeam1Players.get(i) + "')");
            while (result.next()) {
                p1BatAve += Float.parseFloat(result.getString(1));
                p1BatSr += Float.parseFloat(result.getString(2));
                p1BatRuns = Float.parseFloat(result.getString(3));
                p1BatInns = Float.parseFloat(result.getString(4));
                p1Score += p1BatRuns / p1BatInns;
                p1BatT++;
            }

            result = DBHandler.getQueryResult("select `Matches` from `player` where Name = '" + selectedTeam1Players.get(i) + "'");
            while (result.next()) {
                p1Exp += Float.parseFloat(result.getString(1));
            }

            result = DBHandler.getQueryResult("select ave, econ, sr, runs, inns from bowl_stat where ave != '-' and econ != '-' and idPlayer = (select `idPlayer` from `player` where Name = '" + selectedTeam1Players.get(i) + "')");
            while (result.next()) {
                p1BowlAve += Float.parseFloat(result.getString(1));
                p1BowlEcon += Float.parseFloat(result.getString(2));
                p1BowlSr += Float.parseFloat(result.getString(3));
                p1BowlRuns = Float.parseFloat(result.getString(4));
                p1BowlInns = Float.parseFloat(result.getString(5));
                p1ScoreG += p1BowlRuns / p1BowlInns;
                p1BowlT++;
            }

        }
    }

    private void clearVariables() {
        // TODO add your handling code here:
        p1BatAve = 0;
        p1BatSr = 0;
        p1BatT = 0;
        p1BowlAve = 0;
        p1BowlEcon = 0;
        p1BowlSr = 0;
        p1BowlT = 0;
        p2BatAve = 0;
        p2BatSr = 0;
        p2BatT = 0;
        p2BowlAve = 0;
        p2BowlEcon = 0;
        p2BowlSr = 0;
        p2BowlT = 0;
        p1BatRuns = 0;
        p1BatInns = 0;
        p1Score = 0;
        p1BowlRuns = 0;
        p1BowlInns = 0;
        p1ScoreG = 0;
        p1Exp = 0;
        p2BatRuns = 0;
        p2BatInns = 0;
        p2Score = 0;
        p2BowlRuns = 0;
        p2BowlInns = 0;
        p2ScoreG = 0;
        p2Exp = 0;
    }

    private void showMainScreen() {
        Runnable r = new Runnable() {
            public void run() {
                try {
                    Thread.sleep(1500);
                    loadingScreen.setVisible(false);
                    MainScreen.this.setVisible(true);
                } catch (InterruptedException ex) {
                    Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };

        Thread thr1 = new Thread(r);
        thr1.start();
    }

    boolean predict(boolean tAve, boolean lAve, boolean eco, boolean sr) {
        boolean result;  // true = Team1, false = Team2
        if (!tAve) {
            if (!lAve) {
                if (!eco) {
                    if (!sr) {
                        result = P1();
                    } else {
                        result = P2();
                    }
                } else {
                    result = P2();
                }
            } else {
                result = P2();
            }
        } else {
            if (!lAve) {
                if (!eco) {
                    if (!sr) {
                        result = P2();
                    } else {
                        result = P1();
                    }
                } else {
                    result = P1();
                }
            } else {
                result = P1();
            }
        }
        return result;
    }

    boolean P2() {
        return false;
    }

    boolean P1() {
        return true;
    }

    private void createCheckBoxList(JList list, int no) {

        try {
            List<CheckListItem> listOfSheets = new ArrayList<CheckListItem>();
            System.out.println("Select `Name` from `player` where `Country_idCountry` = (Select `idCountry` from `country` where `name` = '" + ((no == 1) ? team1Combo.getSelectedItem() : team2Combo.getSelectedItem()) + "')");
            if (no == 1) {
                result = DBHandler.getQueryResult("Select `Name` from `player` where `Country_idCountry` = (Select `idCountry` from `country` where `name` = '" + team1Combo.getSelectedItem() + "')");
            } else if (no == 2) {
                result = DBHandler.getQueryResult("Select `Name` from `player` where `Country_idCountry` = (Select `idCountry` from `country` where `name` = '" + team2Combo.getSelectedItem() + "')");
            }

            while (result.next()) {
                listOfSheets.add(new CheckListItem(result.getString(1)));
            }
            list.setListData(listOfSheets.toArray(new CheckListItem[listOfSheets.size()]));
//        list.setListData(listOfSheets);
        } catch (Exception ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MainScreen().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPredict;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblError;
    private javax.swing.JList player1List;
    private javax.swing.JList player2List;
    private javax.swing.JTextArea statsScreen;
    private javax.swing.JComboBox team1Combo;
    private javax.swing.JComboBox team2Combo;
    // End of variables declaration//GEN-END:variables
class CheckListItem {

        private String label;
        private boolean isSelected = false;

        public CheckListItem(String label) {
            this.label = label;
        }

        public boolean isSelected() {
            return isSelected;
        }

        public void setSelected(boolean isSelected) {
            this.isSelected = isSelected;
        }

        public String toString() {
            return label;
        }
    }

    class CheckListRenderer extends JCheckBox
            implements ListCellRenderer {

        public Component getListCellRendererComponent(
                JList list, Object value, int index,
                boolean isSelected, boolean hasFocus) {
            setEnabled(list.isEnabled());
            setSelected(((CheckListItem) value).isSelected());
            setFont(list.getFont());
            setBackground(list.getBackground());
            setForeground(list.getForeground());
            setText(value.toString());
            return this;
        }
    }
}
